# rubocop:disable LineLength
# rubocop:disable EmptyLines


require 'minitest/autorun'
require 'rack/test'
require 'pry'
require 'json_expressions/minitest'
require 'database_cleaner'
require 'rack'

require_relative '../asset_manager.rb'


set :database, 'sqlite3:///./test_asset_manager.sqlite3'
DatabaseCleaner.strategy = :transaction
ActiveRecord::Base.logger = nil

class AssetMgrTest < Minitest::Unit::TestCase
  include Rack::Test::Methods

  def app
    Sinatra::Application
  end

  def setup
    DatabaseCleaner.start
  end

  def teardown
    DatabaseCleaner.clean
  end

  def parse_params(str)
    Rack::Utils.parse_query(str)
  end

  def tomorrow
    (Time.now + 1).strftime('%F')
  end

  def booking_id
    MultiJson.load(last_response.body, symbolize_keys: true)[:book][:links][0][:uri].split('/').last.to_i
  end

  def request_params
    MultiJson.load(last_response.body, symbolize_keys: true)[:links][0][:uri].split('/').last.split('?').last
  end

  def resource_pattern
    {
      resource: {
        name: String,
        description: String,
        links: [
          {
            rel: 'self',
            uri: /\Ahttps?\:\/\/.*\z/i
          },
          {
            rel: 'bookings',
            uri: /\Ahttps?\:\/\/.*\z/i
          }
        ]
      }
    }
  end

  def resources_pattern
    {
      resources: [
        {
          name: String,
          description: String,
          links: [
            {
              rel: 'self',
              uri: /\Ahttps?\:\/\/.*\z/i
            }
          ]
        }
      ] * 3,
      links: [
        {
          rel: 'self',
          uri: /\Ahttps?\:\/\/.*\z/i
        }
      ]
    }
  end

  def booking_pattern
    {
      book: {
        from: String,
        to: String,
        status: String,
        user: String,
        links: [
          {
            rel: 'self',
            uri: /\Ahttps?\:\/\/.*\z/i
          },
          {
            rel: 'reject',
            uri: /\Ahttps?\:\/\/.*\z/i,
            method: 'DELETE'
          },
          {
            rel: 'resource',
            uri: /\Ahttps?\:\/\/.*\z/i
          }
        ].forgiving!
      }
    }
  end

  def bookings_pattern
    {
      bookings: [
        {
          start: String,
          finish: String,
          status: String,
          user: String,
          links: [
            {
              rel: 'self',
              uri: /\Ahttps?\:\/\/.*\z/i
            },
            {
              rel: 'resource',
              uri: /\Ahttps?\:\/\/.*\z/i
            },
            {
              rel: 'reject',
              uri: /\Ahttps?\:\/\/.*\z/i,
              method: 'DELETE'
            }].forgiving!
         }] * 2,
      links: [
        {
          rel: 'self',
          uri: /\Ahttps?\:\/\/.*\z/i
        }]
    }
  end

  def availability_pattern
    {
     availability: [
        {
        start: String,
        finish: String,
        links: [
          {
            rel: 'book',
            uri: /\Ahttps?\:\/\/.*\z/i,
            method: 'POST'
          },
          {
            rel: 'resource',
            uri: /\Ahttps?\:\/\/.*\z/i
          }
        ]
      }
     ] * 3,
     links: [
          {
            rel: 'self',
            uri: /\Ahttps?\:\/\/.*\z/i
          }
    ]
  }
  end

### Get resources tests
  def test_get_resources
#    DatabaseCleaner.start
    get '/resources'
    assert_equal 200, last_response.status
    last_response.headers['Content-Type'].must_equal 'application/json;charset=utf-8'
    assert_json_match resources_pattern, last_response.body
#    DatabaseCleaner.clean
  end



### Get resource tests
  def test_get_resource_success
#    DatabaseCleaner.start
    get '/resources/1'
    assert_equal 200, last_response.status
    last_response.headers['Content-Type'].must_equal 'application/json;charset=utf-8'
    assert_json_match resource_pattern, last_response.body
#    DatabaseCleaner.clean
  end

  def test_get_resource_fail_not_exist
#    DatabaseCleaner.start
    get '/resources/100'
    assert_equal 404, last_response.status
#    DatabaseCleaner.clean
  end

  def test_get_resource_fail_bad_request
#    DatabaseCleaner.start
    get '/resources/asd'
    assert_equal 400, last_response.status
#    DatabaseCleaner.clean
  end




### Get bookings tests
  def test_get_bookings_success
#    DatabaseCleaner.start
    Booking.create(resource_id: 1,
                   start: '2014-05-05 10:00'.to_datetime,
                   finish: '2014-05-05 11:00'.to_datetime,
                   user: 'luiggi@abc.com',
                   status: 'approved')
    Booking.create(resource_id: 1,
                   start: '2014-05-05 10:00'.to_datetime,
                   finish: '2014-05-05 11:00'.to_datetime,
                   user: 'luiggi@abc.com',
                   status: 'approved')
    get '/resources/1/bookings', 'date' => '2014-05-05', 'limit' => '2'
    assert_equal 200, last_response.status
    last_response.headers['Content-Type'].must_equal 'application/json;charset=utf-8'
    assert_json_match bookings_pattern, last_response.body
#    DatabaseCleaner.clean
  end

  def test_get_bookings_success_default_params
#    DatabaseCleaner.start
    get '/resources/1/bookings'
    assert_equal 200, last_response.status
    last_response.headers['Content-Type'].must_equal 'application/json;charset=utf-8'
    params = parse_params(request_params)
    assert_equal tomorrow , params['date']
    assert_equal '30' , params['limit']
    assert_equal 'approved' , params['status']
#    DatabaseCleaner.clean
  end

  def test_get_bookings_success_default_params2
#    DatabaseCleaner.start
    get '/resources/1/bookings', 'limit' => 400
    assert_equal 200, last_response.status
    last_response.headers['Content-Type'].must_equal 'application/json;charset=utf-8'
    params = parse_params(request_params)
    assert_equal '365' , params['limit']
#    DatabaseCleaner.clean
  end

  def test_get_bookings_fail_not_found
#    DatabaseCleaner.start
    get '/resources/10000/bookings'
    assert_equal 404, last_response.status
#    DatabaseCleaner.clean
  end

  def test_get_bookings_fail_bad_request
#    DatabaseCleaner.start
    get '/resources/asd/bookings'
    assert_equal 400, last_response.status
#    DatabaseCleaner.clean
  end

  def test_get_bookings_fail_bad_request2
#    DatabaseCleaner.start
    get '/resources/asd/bookings', 'limit' => 'asd'
    assert_equal 400, last_response.status
#    DatabaseCleaner.clean
  end

  def test_get_bookings_fail_bad_request3
#    DatabaseCleaner.start
    get '/resources/asd/bookings', 'date' => '12/02/2013'
    assert_equal 400, last_response.status
#    DatabaseCleaner.clean
  end


### Get booking tests
  def test_get_booking_success
#    DatabaseCleaner.start
    Booking.create(resource_id: 1,
                   start: '2014-05-05 10:00'.to_datetime,
                   finish: '2014-05-05 11:00'.to_datetime,
                   user: 'luiggi@abc.com',
                   status: 'pending')
    get '/resources/1/bookings/535'
    assert_equal 200, last_response.status
    last_response.headers['Content-Type'].must_equal 'application/json;charset=utf-8'
    assert_json_match booking_pattern, last_response.body
##    DatabaseCleaner.clean
  end

  def test_get_booking_fail_not_found
#    DatabaseCleaner.start
    get '/resources/1/bookings/1'
    assert_equal 404, last_response.status
#    DatabaseCleaner.clean
  end

  def test_get_booking_fail_not_found2
#    DatabaseCleaner.start
    get '/resources/10000/bookings/1'
    assert_equal 404, last_response.status
#    DatabaseCleaner.clean
  end

  def test_get_booking_fail_bad_request
#    DatabaseCleaner.start
    get '/resources/asd/bookings/1'
    assert_equal 400, last_response.status
#    DatabaseCleaner.clean
  end

  def test_get_booking_fail_bad_request2
#    DatabaseCleaner.start
    get '/resources/1/bookings/asd'
    assert_equal 400, last_response.status
#    DatabaseCleaner.clean
  end




### Reject booking tests
  def test_delete_booking_sucess
#    DatabaseCleaner.start
    Booking.create(resource_id: 1,
                   start: '2014-05-05 10:00'.to_datetime,
                   finish: '2014-05-05 11:00'.to_datetime,
                   user: 'luiggi@abc.com',
                   status: 'approved')
    delete '/resources/1/bookings/535'
    assert_equal 200, last_response.status
#    DatabaseCleaner.clean
  end

  def test_delete_booking_fail_not_found
#    DatabaseCleaner.start
    delete '/resources/1/bookings/1'
    assert_equal 404, last_response.status
#    DatabaseCleaner.clean
  end

  def test_delete_booking_fail_not_found2
#    DatabaseCleaner.start
    delete '/resources/1000/bookings/1'
    assert_equal 404, last_response.status
#    DatabaseCleaner.clean
  end

  def test_delete_booking_fail_bad_request
#    DatabaseCleaner.start
    delete '/resources/asd/bookings/1'
    assert_equal 400, last_response.status
#    DatabaseCleaner.clean
  end

  def test_delete_booking_fail_bad_request2
#    DatabaseCleaner.start
    delete '/resources/1/bookings/asd'
    assert_equal 400, last_response.status
#    DatabaseCleaner.clean
  end




### Approve booking tests
  def test_approve_booking_fail_not_found
#    DatabaseCleaner.start
    put '/resources/1/bookings/1'
    assert_equal 404, last_response.status
#    DatabaseCleaner.clean
  end

  def test_approve_booking_fail_conflict
#    DatabaseCleaner.start
    Booking.create(resource_id: 1,
                   start: '2014-05-05 10:00'.to_datetime,
                   finish: '2014-05-05 11:00'.to_datetime,
                   user: 'luiggi@abc.com',
                   status: 'approved')
    Booking.create(resource_id: 1,
                   start: '2014-05-05 10:00'.to_datetime,
                   finish: '2014-05-05 11:00'.to_datetime,
                   user: 'luiggi@abc.com',
                   status: 'pending')
    put '/resources/1/bookings/536'
    assert_equal 409, last_response.status
#    DatabaseCleaner.clean
  end

  def test_approve_booking_fail_bad_request
#    DatabaseCleaner.start
    put '/resources/asd/bookings/1'
    assert_equal 400, last_response.status
#    DatabaseCleaner.clean
  end

  def test_approve_booking_fail_bad_request2
#    DatabaseCleaner.start
    put '/resources/1/bookings/asd'
    assert_equal 400, last_response.status
#    DatabaseCleaner.clean
  end

  def test_approve_booking_success
#    DatabaseCleaner.start
    Booking.create(resource_id: 1,
                   start: '2014-05-05 10:00'.to_datetime,
                   finish: '2014-05-05 11:00'.to_datetime,
                   user: 'luiggi@abc.com',
                   status: 'pending')
    Booking.create(resource_id: 1,
                   start: '2014-05-05 10:00'.to_datetime,
                   finish: '2014-05-05 11:00'.to_datetime,
                   user: 'luiggi@abc.com',
                   status: 'pending')
    put '/resources/1/bookings/535'
    assert_equal 200, last_response.status
    assert_json_match booking_pattern, last_response.body
    get '/resources/1/bookings/536'
    assert_equal 404, last_response.status
#    DatabaseCleaner.clean
  end

### Create booking tests
  def test_create_booking_fail_not_found
#    DatabaseCleaner.start
    post '/resources/1000/bookings', 'from' => '2014-04-01 10:00', 'to' => '2014-04-01 11:00', 'user' => 'luiggi@gmail.com'
    assert_equal 404, last_response.status
#    DatabaseCleaner.clean
  end

  # parameters missing
  def test_create_fail
#    DatabaseCleaner.start
    post '/resources/1/bookings'
    assert_equal 400, last_response.status
#    DatabaseCleaner.clean
  end

  def test_create_success
#    DatabaseCleaner.start
    post '/resources/1/bookings', 'from' => '2014-05-01 10:00', 'to' => '2014-05-01 11:00', 'user' => 'luiggi@gmail.com'
    assert_equal 201, last_response.status
    assert_json_match booking_pattern, last_response.body
#    DatabaseCleaner.clean
  end

  # from has invalid dates
  def test_create_fail_bad_request
#    DatabaseCleaner.start
    post '/resources/1/bookings', 'from' => '01/04/2014 10:00', 'to' => '2014-04-01 11:00', 'user' => 'luiggi@gmail.com'
    assert_equal 400, last_response.status
#    DatabaseCleaner.clean
  end

  # to has invalid date
  def test_create_fail_bad_request2
#    DatabaseCleaner.start
    post '/resources/1/bookings', 'from' => '2014-04-01 10:00', 'to' => '01/04/2014 11:00', 'user' => 'luiggi@gmail.com'
    assert_equal 400, last_response.status
#    DatabaseCleaner.clean
  end

  # dates in the past
  def test_create_fail_bad_request3
#    DatabaseCleaner.start
    post '/resources/1/bookings', 'from' => '2013-04-01 10:00', 'to' => '2013-04-01 11:00', 'user' => 'luiggi@gmail.com'
    assert_equal 400, last_response.status
#    DatabaseCleaner.clean
  end

  # to greater than from
  def test_create_fail_bad_request4
#    DatabaseCleaner.start
    post '/resources/1/bookings', 'from' => '2014-04-01 11:00', 'to' => '2014-04-01 10:00', 'user' => 'luiggi@gmail.com'
    assert_equal 400, last_response.status
#    DatabaseCleaner.clean
  end


### Get available slots test
  def test_get_availability_success
#    DatabaseCleaner.start
    Booking.create(resource_id: 1,
                   start: '2014-05-13 11:00'.to_datetime,
                   finish: '2014-05-13 12:00'.to_datetime,
                   user: 'luiggi@abc.com',
                   status: 'approved')
    Booking.create(resource_id: 1,
                   start: '2014-05-13 14:00'.to_datetime,
                   finish: '2014-05-13 15:00'.to_datetime,
                   user: 'luiggi@abc.com',
                   status: 'pending')
    Booking.create(resource_id: 1,
                   start: '2014-05-14 11:00'.to_datetime,
                   finish: '2014-05-14 12:00'.to_datetime,
                   user: 'luiggi@abc.com',
                   status: 'approved')
    get '/resources/1/availability', 'date' => '2014-05-12', 'limit' => '3'
    assert_equal 200, last_response.status
    last_response.headers['Content-Type'].must_equal 'application/json;charset=utf-8'
    assert_json_match availability_pattern, last_response.body
#    DatabaseCleaner.clean
  end

  def test_get_availability_success_default_params
#    DatabaseCleaner.start
    get '/resources/1/availability'
    assert_equal 200, last_response.status
    last_response.headers['Content-Type'].must_equal 'application/json;charset=utf-8'
    params = parse_params(request_params)
    assert_equal tomorrow, params['date']
    assert_equal '30', params['limit']
#    DatabaseCleaner.clean
  end

  def test_get_availability_success_default_params2
#    DatabaseCleaner.start
    get '/resources/1/availability', 'limit' => '400'
    assert_equal 200, last_response.status
    last_response.headers['Content-Type'].must_equal 'application/json;charset=utf-8'
    params = parse_params(request_params)
    assert_equal '365' , params['limit']
#    DatabaseCleaner.clean
  end

  def test_get_availability_fail_not_found
#    DatabaseCleaner.start
    get '/resources/1000/availability', 'date' => '2014-02-12', 'limit' => '3'
    assert_equal 404, last_response.status
    last_response.headers['Content-Type'].must_equal 'application/json;charset=utf-8'
#    DatabaseCleaner.clean
  end

  def test_get_availability_fail_bad_request
#    DatabaseCleaner.start
    get '/resources/1/availability', 'date' => '2014-02-12', 'limit' => 'asd'
    assert_equal 400, last_response.status
    last_response.headers['Content-Type'].must_equal 'application/json;charset=utf-8'
#    DatabaseCleaner.clean
  end

  def test_get_availability_fail_bad_request2
#    DatabaseCleaner.start
    get '/resources/1/availability', 'date' => '12/02/2014', 'limit' => 'asd'
    assert_equal 400, last_response.status
    last_response.headers['Content-Type'].must_equal 'application/json;charset=utf-8'
#    DatabaseCleaner.clean
  end


### Integration tests
  def test_create_approve_delete_booking
#    DatabaseCleaner.start
    post '/resources/1/bookings', 'from' => '2014-05-01 10:00', 'to' => '2014-05-01 11:00', 'user' => 'luiggi@gmail.com'
    assert_equal 201, last_response.status

    put "/resources/1/bookings/#{booking_id}"
    assert_equal 200, last_response.status

    delete "/resources/1/bookings/#{booking_id}"
    assert_equal 200, last_response.status
#    DatabaseCleaner.clean
  end
end
